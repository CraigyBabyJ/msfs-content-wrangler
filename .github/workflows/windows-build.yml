name: build-windows

permissions:
  contents: write  # allow creating releases with the default GITHUB_TOKEN

on:
  workflow_dispatch:
  push:
    tags:
      - 'v*'

jobs:
  build:
    runs-on: windows-latest
    defaults:
      run:
        shell: pwsh

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pyinstaller

      # Build a folder-based dist (best for PySide6/Qt)
      - name: Build EXE with PyInstaller
        run: |
          pyinstaller --noconsole --windowed `
            --name msfs-content-wrangler `
            --icon icons/app.ico `
            --collect-all PySide6 `
            --add-data "resources.qss;." `
            --add-data "rules.json;." `
            --add-data "icons\*.*;icons" `
            main.py

      - name: Verify EXE exists
        run: |
          $exe = "dist\msfs-content-wrangler\msfs-content-wrangler.exe"
          if (!(Test-Path $exe)) {
            Get-ChildItem -Recurse dist
            throw "EXE not found at $exe"
          }

      # ---- Slim the PySide6 payload safely ----
      - name: Prune unused PySide6 files
        run: |
          $dist = "dist\msfs-content-wrangler"

          # 1) Remove package metadata (not needed at runtime)
          Get-ChildItem $dist -Directory -Filter "*.dist-info" |
            Remove-Item -Recurse -Force -ErrorAction SilentlyContinue

          # 2) Remove Qt tools/extras we don't use
          $rm = @(
            "PySide6\assistant",
            "PySide6\designer",
            "PySide6\linguist",
            "PySide6\qml",
            "PySide6\translations",
            "PySide6\examples"
          )
          foreach ($rel in $rm) {
            $p = Join-Path $dist $rel
            if (Test-Path $p) { Remove-Item $p -Recurse -Force -ErrorAction SilentlyContinue }
          }

          # 3) Keep only common image/icon plugins
          $imgDir  = Join-Path $dist "PySide6\plugins\imageformats"
          if (Test-Path $imgDir) {
            $keep = @("qjpeg.dll","qico.dll","qpng.dll","qgif.dll","qsvg.dll")
            Get-ChildItem $imgDir -Filter *.dll |
              Where-Object { $keep -notcontains $_.Name } |
              Remove-Item -Force -ErrorAction SilentlyContinue
          }
          $iconDir = Join-Path $dist "PySide6\plugins\iconengines"
          if (Test-Path $iconDir) {
            $keepIcon = @("qsvgicon.dll")
            Get-ChildItem $iconDir -Filter *.dll |
              Where-Object { $keepIcon -notcontains $_.Name } |
              Remove-Item -Force -ErrorAction SilentlyContinue
          }

      - name: Zip dist folder (contains the .exe)
        run: |
          $src = "dist\msfs-content-wrangler"
          Compress-Archive -Path "$src\*" -DestinationPath msfs-content-wrangler.zip -Force
          Get-Item msfs-content-wrangler.zip

      - name: Upload artifact (for manual runs)
        uses: actions/upload-artifact@v4
        with:
          name: msfs-content-wrangler
          path: msfs-content-wrangler.zip

      - name: Upload to GitHub Release
        if: startsWith(github.ref, 'refs/tags/')
        uses: softprops/action-gh-release@v2
        with:
          files: |
            msfs-content-wrangler.zip
        # If your org enforces read-only GITHUB_TOKEN, add a PAT secret and uncomment:
        #   token: ${{ secrets.RELEASE_PAT }}
